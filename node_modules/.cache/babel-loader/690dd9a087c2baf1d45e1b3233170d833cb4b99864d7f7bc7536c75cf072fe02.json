{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"title\"\n}, \"제목:\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"content\"\n}, \"내용:\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"author\"\n}, \"작성자:\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"수정\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, _toDisplayString($options.isQuestion ? '질문' : '답변') + \" 수정\", 1 /* TEXT */), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [$options.isQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.form.title = $event),\n    id: \"title\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.form.title]])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.form.content = $event),\n    id: \"content\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.form.content]])]), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.form.author = $event),\n    id: \"author\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.form.author]])]), _hoisted_5], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["key","_createElementVNode","for","type","_createElementBlock","_toDisplayString","$options","isQuestion","onSubmit","_cache","_withModifiers","args","submitForm","_hoisted_1","_hoisted_2","$event","$data","form","title","id","required","_createCommentVNode","_hoisted_3","content","_hoisted_4","author","_hoisted_5"],"sources":["D:\\gitRepository\\sunglee0517\\vuejs_project01\\01_company_mvvm\\src\\views\\QnaUpdate.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>{{ isQuestion ? '질문' : '답변' }} 수정</h1>\r\n      <form @submit.prevent=\"submitForm\">\r\n        <div v-if=\"isQuestion\">\r\n          <label for=\"title\">제목:</label>\r\n          <input type=\"text\" v-model=\"form.title\" id=\"title\" required />\r\n        </div>\r\n        <div>\r\n          <label for=\"content\">내용:</label>\r\n          <textarea v-model=\"form.content\" id=\"content\" required></textarea>\r\n        </div>\r\n        <div>\r\n          <label for=\"author\">작성자:</label>\r\n          <input type=\"text\" v-model=\"form.author\" id=\"author\" required />\r\n        </div>\r\n        <button type=\"submit\">수정</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { mapState, mapActions } from 'vuex';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {\r\n          title: '',\r\n          content: '',\r\n          author: '',\r\n        },\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapState(['qna']),\r\n      isQuestion() {\r\n        return this.qna.lev === 0;\r\n      },\r\n    },\r\n    methods: {\r\n      ...mapActions(['fetchQna', 'updateQna']),\r\n      submitForm() {\r\n        this.updateQna({ id: this.$route.params.id, qna: this.form }).then(() => {\r\n          const targetRoute = this.isQuestion ? 'QnaDetail' : 'QnaDetail';\r\n          this.$router.push({ name: targetRoute, params: { id: this.qna.lev === 0 ? this.qna.qno : this.qna.parno } });\r\n        });\r\n      },\r\n    },\r\n    created() {\r\n      this.fetchQna(this.$route.params.id).then(() => {\r\n        this.form = {\r\n          title: this.qna.title,\r\n          content: this.qna.content,\r\n          author: this.qna.author,\r\n        };\r\n      });\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;EAAAA,GAAA;AAAA;gCAKUC,mBAAA,CAA8B;EAAvBC,GAAG,EAAC;AAAO,GAAC,KAAG;gCAItBD,mBAAA,CAAgC;EAAzBC,GAAG,EAAC;AAAS,GAAC,KAAG;gCAIxBD,mBAAA,CAAgC;EAAzBC,GAAG,EAAC;AAAQ,GAAC,MAAI;gCAG1BD,mBAAA,CAAiC;EAAzBE,IAAI,EAAC;AAAQ,GAAC,IAAE;;uBAf5BC,mBAAA,CAiBM,cAhBJH,mBAAA,CAA0C,YAAAI,gBAAA,CAAnCC,QAAA,CAAAC,UAAU,kBAAiB,KAAG,iBACrCN,mBAAA,CAcO;IAdAO,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHnBC,cAAA,KAAAC,IAAA,KAG6BL,QAAA,CAAAM,UAAA,IAAAN,QAAA,CAAAM,UAAA,IAAAD,IAAA,CAAU;MACpBL,QAAA,CAAAC,UAAU,I,cAArBH,mBAAA,CAGM,OAPdS,UAAA,GAKUC,UAA8B,E,gBAC9Bb,mBAAA,CAA8D;IAAvDE,IAAI,EAAC,MAAM;IAN5B,uBAAAM,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAMsCC,KAAA,CAAAC,IAAI,CAACC,KAAK,GAAAH,MAAA;IAAEI,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR;iDAAvBJ,KAAA,CAAAC,IAAI,CAACC,KAAK,E,OANhDG,mBAAA,gBAQQpB,mBAAA,CAGM,cAFJqB,UAAgC,E,gBAChCrB,mBAAA,CAAkE;IAV5E,uBAAAQ,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAU6BC,KAAA,CAAAC,IAAI,CAACM,OAAO,GAAAR,MAAA;IAAEI,EAAE,EAAC,SAAS;IAACC,QAAQ,EAAR;iDAA3BJ,KAAA,CAAAC,IAAI,CAACM,OAAO,E,KAEjCtB,mBAAA,CAGM,cAFJuB,UAAgC,E,gBAChCvB,mBAAA,CAAgE;IAAzDE,IAAI,EAAC,MAAM;IAd5B,uBAAAM,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAcsCC,KAAA,CAAAC,IAAI,CAACQ,MAAM,GAAAV,MAAA;IAAEI,EAAE,EAAC,QAAQ;IAACC,QAAQ,EAAR;iDAAzBJ,KAAA,CAAAC,IAAI,CAACQ,MAAM,E,KAEzCC,UAAiC,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}